// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/pandora_shard_state.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PandoraShardState struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	GasPrice             uint64   `protobuf:"varint,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	LatestBlockRoot      []byte   `protobuf:"bytes,3,opt,name=latest_block_root,json=latestBlockRoot,proto3" json:"latest_block_root,omitempty" ssz-size:"32"`
	ParentBlockRoot      []byte   `protobuf:"bytes,4,opt,name=parent_block_root,json=parentBlockRoot,proto3" json:"parent_block_root,omitempty" ssz-size:"32"`
	TxHash               []byte   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" ssz-size:"32"`
	ReceiptHash          []byte   `protobuf:"bytes,6,opt,name=receipt_hash,json=receiptHash,proto3" json:"receipt_hash,omitempty" ssz-size:"32"`
	BlockNumber          uint64   `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit             uint64   `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed              uint64   `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PandoraShardState) Reset()         { *m = PandoraShardState{} }
func (m *PandoraShardState) String() string { return proto.CompactTextString(m) }
func (*PandoraShardState) ProtoMessage()    {}
func (*PandoraShardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b501c82eca9207c8, []int{0}
}
func (m *PandoraShardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PandoraShardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PandoraShardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PandoraShardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PandoraShardState.Merge(m, src)
}
func (m *PandoraShardState) XXX_Size() int {
	return m.Size()
}
func (m *PandoraShardState) XXX_DiscardUnknown() {
	xxx_messageInfo_PandoraShardState.DiscardUnknown(m)
}

var xxx_messageInfo_PandoraShardState proto.InternalMessageInfo

func (m *PandoraShardState) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *PandoraShardState) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *PandoraShardState) GetLatestBlockRoot() []byte {
	if m != nil {
		return m.LatestBlockRoot
	}
	return nil
}

func (m *PandoraShardState) GetParentBlockRoot() []byte {
	if m != nil {
		return m.ParentBlockRoot
	}
	return nil
}

func (m *PandoraShardState) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PandoraShardState) GetReceiptHash() []byte {
	if m != nil {
		return m.ReceiptHash
	}
	return nil
}

func (m *PandoraShardState) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PandoraShardState) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *PandoraShardState) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func init() {
	proto.RegisterType((*PandoraShardState)(nil), "ethereum.eth.v1alpha1.PandoraShardState")
}

func init() {
	proto.RegisterFile("eth/v1alpha1/pandora_shard_state.proto", fileDescriptor_b501c82eca9207c8)
}

var fileDescriptor_b501c82eca9207c8 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0xca, 0xd3, 0x40,
	0x10, 0xc7, 0x49, 0xad, 0xed, 0xf7, 0xed, 0x57, 0x91, 0x06, 0x3e, 0x88, 0x0a, 0xf5, 0xb3, 0x07,
	0x29, 0x42, 0x13, 0x6a, 0xc5, 0x83, 0xe2, 0xa5, 0x50, 0xf0, 0x20, 0x52, 0x5a, 0xbc, 0x88, 0x10,
	0x26, 0xc9, 0x98, 0x5d, 0x4c, 0xba, 0xcb, 0xce, 0x44, 0x6a, 0x1f, 0xc9, 0x27, 0xf1, 0xe8, 0x13,
	0x88, 0xf4, 0x11, 0x7c, 0x01, 0x25, 0x1b, 0x53, 0xeb, 0xa1, 0xb7, 0xf9, 0xcf, 0xfc, 0x7f, 0x99,
	0xec, 0xcc, 0x88, 0xc7, 0xc8, 0x32, 0xfa, 0x3c, 0x83, 0xc2, 0x48, 0x98, 0x45, 0x06, 0xb6, 0x99,
	0xb6, 0x10, 0x93, 0x04, 0x9b, 0xc5, 0xc4, 0xc0, 0x18, 0x1a, 0xab, 0x59, 0xfb, 0xd7, 0xc8, 0x12,
	0x2d, 0x56, 0x65, 0x88, 0x2c, 0xc3, 0x16, 0xb8, 0x3f, 0xcd, 0x15, 0xcb, 0x2a, 0x09, 0x53, 0x5d,
	0x46, 0xb9, 0xce, 0x75, 0xe4, 0xdc, 0x49, 0xf5, 0xd1, 0x29, 0x27, 0x5c, 0xd4, 0x7c, 0x65, 0xfc,
	0xbb, 0x23, 0x86, 0xab, 0xa6, 0xc7, 0xa6, 0x6e, 0xb1, 0xa9, 0x3b, 0xf8, 0xbe, 0xe8, 0x52, 0xa1,
	0x39, 0xf0, 0x6e, 0xbc, 0x49, 0x77, 0xed, 0x62, 0xff, 0x81, 0xb8, 0xcc, 0x81, 0x62, 0x63, 0x55,
	0x8a, 0x41, 0xc7, 0x15, 0x2e, 0x72, 0xa0, 0x55, 0xad, 0xfd, 0x57, 0x62, 0x58, 0x00, 0x23, 0x71,
	0x9c, 0x14, 0x3a, 0xfd, 0x14, 0x5b, 0xad, 0x39, 0xb8, 0x75, 0xe3, 0x4d, 0x06, 0x8b, 0xe1, 0xaf,
	0x1f, 0x0f, 0xef, 0x10, 0xed, 0xa7, 0xa4, 0xf6, 0xf8, 0x62, 0x3c, 0x7f, 0x3a, 0x5e, 0xdf, 0x6d,
	0xbc, 0x8b, 0xda, 0xba, 0xd6, 0x9a, 0x6b, 0xdc, 0x80, 0xc5, 0xed, 0x7f, 0x78, 0xf7, 0x2c, 0xde,
	0x78, 0xff, 0xe1, 0x4f, 0x44, 0x9f, 0x77, 0xb1, 0x04, 0x92, 0xc1, 0xed, 0x73, 0x50, 0x8f, 0x77,
	0xaf, 0x81, 0xa4, 0xff, 0x4c, 0x0c, 0x2c, 0xa6, 0xa8, 0x0c, 0x37, 0x40, 0xef, 0x1c, 0x70, 0xf5,
	0xd7, 0xe6, 0xa8, 0x47, 0x62, 0xd0, 0xfc, 0xd9, 0xb6, 0x2a, 0x13, 0xb4, 0x41, 0xdf, 0xbd, 0xff,
	0xca, 0xe5, 0xde, 0xba, 0x54, 0x3b, 0x9f, 0x42, 0x95, 0x8a, 0x83, 0x8b, 0xe3, 0x7c, 0xde, 0xd4,
	0xda, 0xbf, 0x27, 0xea, 0x38, 0xae, 0x08, 0xb3, 0xe0, 0xd2, 0xd5, 0xfa, 0x39, 0xd0, 0x3b, 0xc2,
	0x6c, 0xf1, 0xe1, 0xdb, 0x61, 0xe4, 0x7d, 0x3f, 0x8c, 0xbc, 0x9f, 0x87, 0x91, 0xf7, 0xfe, 0xf9,
	0xc9, 0xfa, 0x8c, 0xfd, 0x42, 0x25, 0xb0, 0x4a, 0x0b, 0x48, 0x28, 0x6a, 0xd7, 0x0d, 0x46, 0x39,
	0x71, 0xbc, 0x91, 0x97, 0xc8, 0xf2, 0x6b, 0xe7, 0x7a, 0xd9, 0x9e, 0xc3, 0xf2, 0xe4, 0x1c, 0x92,
	0x9e, 0x5b, 0xf3, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0x92, 0x00, 0x53, 0x56, 0x02,
	0x00, 0x00,
}

func (m *PandoraShardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PandoraShardState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PandoraShardState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GasUsed != 0 {
		i = encodeVarintPandoraShardState(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x48
	}
	if m.GasLimit != 0 {
		i = encodeVarintPandoraShardState(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockNumber != 0 {
		i = encodeVarintPandoraShardState(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ReceiptHash) > 0 {
		i -= len(m.ReceiptHash)
		copy(dAtA[i:], m.ReceiptHash)
		i = encodeVarintPandoraShardState(dAtA, i, uint64(len(m.ReceiptHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintPandoraShardState(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ParentBlockRoot) > 0 {
		i -= len(m.ParentBlockRoot)
		copy(dAtA[i:], m.ParentBlockRoot)
		i = encodeVarintPandoraShardState(dAtA, i, uint64(len(m.ParentBlockRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LatestBlockRoot) > 0 {
		i -= len(m.LatestBlockRoot)
		copy(dAtA[i:], m.LatestBlockRoot)
		i = encodeVarintPandoraShardState(dAtA, i, uint64(len(m.LatestBlockRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GasPrice != 0 {
		i = encodeVarintPandoraShardState(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintPandoraShardState(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPandoraShardState(dAtA []byte, offset int, v uint64) int {
	offset -= sovPandoraShardState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PandoraShardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovPandoraShardState(uint64(m.Slot))
	}
	if m.GasPrice != 0 {
		n += 1 + sovPandoraShardState(uint64(m.GasPrice))
	}
	l = len(m.LatestBlockRoot)
	if l > 0 {
		n += 1 + l + sovPandoraShardState(uint64(l))
	}
	l = len(m.ParentBlockRoot)
	if l > 0 {
		n += 1 + l + sovPandoraShardState(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovPandoraShardState(uint64(l))
	}
	l = len(m.ReceiptHash)
	if l > 0 {
		n += 1 + l + sovPandoraShardState(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovPandoraShardState(uint64(m.BlockNumber))
	}
	if m.GasLimit != 0 {
		n += 1 + sovPandoraShardState(uint64(m.GasLimit))
	}
	if m.GasUsed != 0 {
		n += 1 + sovPandoraShardState(uint64(m.GasUsed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPandoraShardState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPandoraShardState(x uint64) (n int) {
	return sovPandoraShardState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PandoraShardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPandoraShardState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PandoraShardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PandoraShardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockRoot = append(m.LatestBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockRoot == nil {
				m.LatestBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentBlockRoot = append(m.ParentBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentBlockRoot == nil {
				m.ParentBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptHash = append(m.ReceiptHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptHash == nil {
				m.ReceiptHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPandoraShardState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPandoraShardState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPandoraShardState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPandoraShardState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPandoraShardState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPandoraShardState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPandoraShardState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPandoraShardState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPandoraShardState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPandoraShardState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPandoraShardState = fmt.Errorf("proto: unexpected end of group")
)
