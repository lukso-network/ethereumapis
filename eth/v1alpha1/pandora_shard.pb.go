// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/pandora_shard.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PandoraShard struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty" ssz-size:"32"`
	ParentHash           []byte   `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty" ssz-size:"32"`
	StateRoot            []byte   `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty" ssz-size:"32"`
	TxHash               []byte   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" ssz-size:"32"`
	ReceiptHash          []byte   `protobuf:"bytes,6,opt,name=receipt_hash,json=receiptHash,proto3" json:"receipt_hash,omitempty" ssz-size:"32"`
	Signature            []byte   `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PandoraShard) Reset()         { *m = PandoraShard{} }
func (m *PandoraShard) String() string { return proto.CompactTextString(m) }
func (*PandoraShard) ProtoMessage()    {}
func (*PandoraShard) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb7848ce22eff3f, []int{0}
}
func (m *PandoraShard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PandoraShard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PandoraShard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PandoraShard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PandoraShard.Merge(m, src)
}
func (m *PandoraShard) XXX_Size() int {
	return m.Size()
}
func (m *PandoraShard) XXX_DiscardUnknown() {
	xxx_messageInfo_PandoraShard.DiscardUnknown(m)
}

var xxx_messageInfo_PandoraShard proto.InternalMessageInfo

func (m *PandoraShard) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PandoraShard) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PandoraShard) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *PandoraShard) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *PandoraShard) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PandoraShard) GetReceiptHash() []byte {
	if m != nil {
		return m.ReceiptHash
	}
	return nil
}

func (m *PandoraShard) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*PandoraShard)(nil), "ethereum.eth.v1alpha1.PandoraShard")
}

func init() { proto.RegisterFile("eth/v1alpha1/pandora_shard.proto", fileDescriptor_bcb7848ce22eff3f) }

var fileDescriptor_bcb7848ce22eff3f = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0xad, 0x2d, 0xdd, 0xc6, 0x83, 0x81, 0x42, 0xf0, 0x50, 0x6b, 0x41, 0x28, 0x42,
	0x13, 0xdb, 0x4a, 0x41, 0xbd, 0x15, 0x0a, 0x9e, 0x44, 0xea, 0x4d, 0x84, 0xb0, 0x49, 0xc7, 0x6c,
	0xb0, 0xc9, 0x86, 0xdd, 0x89, 0xd4, 0x3e, 0x92, 0x4f, 0xe2, 0x51, 0x5f, 0x40, 0xa4, 0x8f, 0xe0,
	0x13, 0x48, 0x27, 0x8d, 0xf4, 0x60, 0x6e, 0x99, 0xc9, 0xf7, 0xff, 0x3b, 0xf0, 0xb1, 0x0e, 0xa0,
	0x70, 0x5f, 0x06, 0x7c, 0x91, 0x0a, 0x3e, 0x70, 0x53, 0x9e, 0xcc, 0xa5, 0xe2, 0x9e, 0x16, 0x5c,
	0xcd, 0x9d, 0x54, 0x49, 0x94, 0x56, 0x0b, 0x50, 0x80, 0x82, 0x2c, 0x76, 0x00, 0x85, 0x53, 0xa0,
	0x47, 0xfd, 0x30, 0x42, 0x91, 0xf9, 0x4e, 0x20, 0x63, 0x37, 0x94, 0xa1, 0x74, 0x89, 0xf6, 0xb3,
	0x27, 0x9a, 0x68, 0xa0, 0xaf, 0xbc, 0xa5, 0xfb, 0x59, 0x61, 0xe6, 0x5d, 0xde, 0x7e, 0xbf, 0x29,
	0xb7, 0x4e, 0x98, 0xe9, 0x2f, 0x64, 0xf0, 0xec, 0x25, 0x59, 0xec, 0x83, 0xb2, 0x8d, 0x8e, 0xd1,
	0xab, 0xce, 0x9a, 0xb4, 0xbb, 0xa5, 0x95, 0x75, 0xca, 0xaa, 0x82, 0x6b, 0x61, 0x57, 0x3a, 0x46,
	0xcf, 0x9c, 0x1c, 0xfe, 0x7c, 0x1d, 0x1f, 0x68, 0xbd, 0xea, 0xeb, 0x68, 0x05, 0x57, 0xdd, 0xd1,
	0xb0, 0x3b, 0xa3, 0xdf, 0xd6, 0x90, 0x35, 0x53, 0xae, 0x20, 0x41, 0x8f, 0xe8, 0xbd, 0x32, 0x9a,
	0xe5, 0xd4, 0xcd, 0x26, 0x73, 0xce, 0x98, 0x46, 0x8e, 0xe0, 0x29, 0x29, 0xd1, 0xae, 0x96, 0x45,
	0x1a, 0x04, 0xcd, 0xa4, 0x44, 0xeb, 0x8c, 0xd5, 0x71, 0x99, 0xbf, 0xb0, 0x5f, 0x86, 0xd7, 0x70,
	0x49, 0xed, 0x17, 0xcc, 0x54, 0x10, 0x40, 0x94, 0x6e, 0x4f, 0xaa, 0x95, 0x05, 0x9a, 0x5b, 0x8c,
	0x52, 0x2e, 0x6b, 0xe8, 0x28, 0x4c, 0x38, 0x66, 0x0a, 0xec, 0xfa, 0x7f, 0x91, 0xcb, 0xf1, 0xe6,
	0xa4, 0x82, 0x99, 0x3c, 0xbe, 0xaf, 0xdb, 0xc6, 0xc7, 0xba, 0x6d, 0x7c, 0xaf, 0xdb, 0xc6, 0xc3,
	0x78, 0x47, 0x48, 0xaa, 0x5e, 0x75, 0xcc, 0x31, 0x0a, 0x16, 0xdc, 0xd7, 0x6e, 0x21, 0x90, 0xa7,
	0x11, 0x0d, 0x7f, 0xbe, 0xaf, 0x01, 0xc5, 0x5b, 0xa5, 0x35, 0x2d, 0x04, 0x4f, 0x77, 0x04, 0xfb,
	0x35, 0x12, 0x37, 0xfa, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xe4, 0x9b, 0x4a, 0x22, 0x02, 0x00,
	0x00,
}

func (m *PandoraShard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PandoraShard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PandoraShard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPandoraShard(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReceiptHash) > 0 {
		i -= len(m.ReceiptHash)
		copy(dAtA[i:], m.ReceiptHash)
		i = encodeVarintPandoraShard(dAtA, i, uint64(len(m.ReceiptHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintPandoraShard(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintPandoraShard(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintPandoraShard(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPandoraShard(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockNumber != 0 {
		i = encodeVarintPandoraShard(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPandoraShard(dAtA []byte, offset int, v uint64) int {
	offset -= sovPandoraShard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PandoraShard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumber != 0 {
		n += 1 + sovPandoraShard(uint64(m.BlockNumber))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPandoraShard(uint64(l))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovPandoraShard(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovPandoraShard(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovPandoraShard(uint64(l))
	}
	l = len(m.ReceiptHash)
	if l > 0 {
		n += 1 + l + sovPandoraShard(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPandoraShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPandoraShard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPandoraShard(x uint64) (n int) {
	return sovPandoraShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PandoraShard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPandoraShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PandoraShard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PandoraShard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptHash = append(m.ReceiptHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptHash == nil {
				m.ReceiptHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPandoraShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPandoraShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPandoraShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPandoraShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPandoraShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPandoraShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPandoraShard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPandoraShard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPandoraShard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPandoraShard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPandoraShard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPandoraShard = fmt.Errorf("proto: unexpected end of group")
)
